# Generated by Django 5.2.6 on 2025-09-06 09:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('utils', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('draft', 'Draft'), ('pending', 'Pending')], db_index=True, default='active', help_text='Status of the record', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('admin', 'Admin'), ('support', 'Support')], default='customer', max_length=20)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=20, null=True)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('draft', 'Draft'), ('pending', 'Pending')], db_index=True, default='active', help_text='Status of the record', max_length=10)),
                ('address_type', models.CharField(choices=[('home', 'Home'), ('work', 'Work')], default='home', max_length=10)),
                ('full_name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=15)),
                ('alternate_phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address_line1', models.CharField(max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(max_length=10)),
                ('landmark', models.CharField(blank=True, max_length=255, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cities', to='utils.city')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='countries', to='utils.country')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='states', to='utils.state')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='AdminActivityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('draft', 'Draft'), ('pending', 'Pending')], db_index=True, default='active', help_text='Status of the record', max_length=10)),
                ('action_type', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('export', 'Export'), ('bulk_action', 'Bulk Action')], max_length=20)),
                ('model_name', models.CharField(blank=True, max_length=100, null=True)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admin_activity_logs',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('draft', 'Draft'), ('pending', 'Pending')], db_index=True, default='active', help_text='Status of the record', max_length=10)),
                ('complaint_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('complaint_type', models.CharField(choices=[('product_quality', 'Product Quality Issue'), ('delivery_delay', 'Delivery Delay'), ('wrong_product', 'Wrong Product Received'), ('damaged_product', 'Damaged Product'), ('poor_service', 'Poor Customer Service'), ('billing_issue', 'Billing/Payment Issue'), ('website_bug', 'Website/App Bug'), ('refund_delay', 'Refund Delay'), ('other', 'Other')], max_length=30)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('complaint_status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('pending_customer', 'Pending Customer Response'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('escalated', 'Escalated')], default='open', max_length=20)),
                ('contact_phone', models.CharField(blank=True, max_length=15)),
                ('preferred_contact_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('both', 'Both')], default='email', max_length=10)),
                ('resolution', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('satisfaction_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Customer satisfaction rating after resolution', null=True)),
                ('customer_feedback', models.TextField(blank=True, null=True)),
                ('attachments', models.URLField(blank=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_complaints', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_complaints', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'complaints',
            },
        ),
        migrations.CreateModel(
            name='ComplaintUpdate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('draft', 'Draft'), ('pending', 'Pending')], db_index=True, default='active', help_text='Status of the record', max_length=10)),
                ('update_type', models.CharField(choices=[('customer_response', 'Customer Response'), ('admin_response', 'Admin Response'), ('status_change', 'Status Change'), ('assignment_change', 'Assignment Change'), ('system_update', 'System Update')], max_length=20)),
                ('message', models.TextField()),
                ('old_status', models.CharField(blank=True, max_length=20)),
                ('new_status', models.CharField(blank=True, max_length=20)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('is_internal', models.BooleanField(default=False)),
                ('complaint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='account.complaint')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaint_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'complaint_updates',
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('draft', 'Draft'), ('pending', 'Pending')], db_index=True, default='active', help_text='Status of the record', max_length=10)),
                ('query', models.CharField(max_length=500)),
                ('results_count', models.IntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'search_queries',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='users_phone_n_a3b1c5_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user', 'is_default'], name='addresses_user_id_41b398_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['postal_code'], name='addresses_postal__0e4029_idx'),
        ),
        migrations.AddIndex(
            model_name='adminactivitylog',
            index=models.Index(fields=['user'], name='admin_activ_user_id_e4e05d_idx'),
        ),
        migrations.AddIndex(
            model_name='adminactivitylog',
            index=models.Index(fields=['action_type'], name='admin_activ_action__8bb182_idx'),
        ),
        migrations.AddIndex(
            model_name='adminactivitylog',
            index=models.Index(fields=['model_name'], name='admin_activ_model_n_2301a4_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['user', 'complaint_status'], name='complaints_user_id_20875a_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['complaint_type', 'priority'], name='complaints_complai_105664_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['complaint_status', 'priority'], name='complaints_complai_6a3fba_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['assigned_to', 'complaint_status'], name='complaints_assigne_632ee0_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['complaint_number'], name='complaints_complai_61606e_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['resolved_at'], name='complaints_resolve_110a13_idx'),
        ),
        migrations.AddIndex(
            model_name='complaintupdate',
            index=models.Index(fields=['complaint'], name='complaint_u_complai_5af10b_idx'),
        ),
        migrations.AddIndex(
            model_name='complaintupdate',
            index=models.Index(fields=['update_type'], name='complaint_u_update__f1ba32_idx'),
        ),
        migrations.AddIndex(
            model_name='complaintupdate',
            index=models.Index(fields=['created_by'], name='complaint_u_created_e1ad30_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['query'], name='search_quer_query_50e46f_idx'),
        ),
    ]
